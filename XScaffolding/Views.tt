<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.ObjectModel" #>
<#@ import namespace="System.Reflection" #>
<#@ output extension=".cs" #>
<#
	/*
		Edit the values below before running the template
		YOUR_ASSEMBLY should be the full name of the current assembly where your models are; 
			if your models are in another assemble then set YOUR_ASSEMBLY to the full name of that assembly
			then change the line above 'assembly name="$(TargetPath)"' to 'assembly name="$(ProjectDir)$(OutDir)YOUR_REFERENCED_ASSEMBLY.dll"'

		YOUR_NAMESPACE should be the namespace you want your generated views to be under

		YOUR_STRING_RESOURCE_CLASS should be the resource class that contains the strings you want to use for labels and titles for the
			fields and forms being generated. 
	*/
	/* EDITABLE OPTIONS */
	const string YOUR_ASSEMBLY = "XScaffolding, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null";
	const string YOUR_NAMESPACE = "MYPROJECT.Views";
	const string YOUR_STRING_RESOURCE_CLASS = "MYPROJECT.Resources";
	/* /EDITABLE OPTIONS */

	var assembly = AppDomain.CurrentDomain.GetAssemblies().Single(a => a.FullName == YOUR_ASSEMBLY);
	var modelTypes = assembly.GetTypes().Where(t => t.CustomAttributes.Any(c => c.AttributeType.Name == "XScaffoldModelAttribute"));
	var namespaces = modelTypes.Select (m => m.Namespace).Distinct();
	var fieldBuilder = new FieldBuilder(YOUR_STRING_RESOURCE_CLASS, this);
#>
using System;
using System.Collections.Generic;
using System.Linq;
using Xamarin.Forms;
<# 
	foreach (var ns in namespaces) 
	{ 
#>
using <#= ns #>;
<# } #>

namespace <#= YOUR_NAMESPACE #>
{
<# 
	foreach (var type in modelTypes) 
	{ 
#>
	public partial class <#= type.Name #>Form : ContentPage
	{
		public <#= type.Name #> Model { get; set; }

		public <#= type.Name #>Form()
		{
			this.Title = <#= YOUR_STRING_RESOURCE_CLASS #>.<#= type.Name #>Title;
<#
foreach (PropertyInfo property in type.GetRuntimeProperties())
{
	fieldBuilder.BuildField(property);
}
#>

			this.Content = new ScrollView
			{
				Content = new StackLayout
				{
					Orientation = StackOrientation.Vertical,
					Spacing = 15,
					Children = 
					{
<# fieldBuilder.WriteAllFields(); #>

					}
				}
			};
		}
	}

<# } #>
}
<#+ 
	
	public class FieldBuilder
	{
		IList<string> output = new List<string>();
		string resourceClass;
		Microsoft.VisualStudio.TextTemplating.TextTransformation transformer;

		public FieldBuilder(string resourceClass, Microsoft.VisualStudio.TextTemplating.TextTransformation transformer)
		{
			this.resourceClass = resourceClass;
			this.transformer = transformer;
		}

		public void WriteAllFields()
		{
			transformer.Write(string.Join(",\n", output.ToArray()));
			output.Clear();
		}

		public void BuildField(PropertyInfo property)
		{
			var attribute = property.CustomAttributes.SingleOrDefault(ca => ca.AttributeType.GetInterface("IEditFieldAttribute") != null);
			if (attribute == null) return;

			switch (attribute.AttributeType.Name)
			{
				case "EntryFieldAttribute":
					WriteEntryField(property, attribute);
					break;

				case "TextFieldAttribute":
					WriteTextField(property, attribute);
					break;

				case "SwitchFieldAttribute":
					WriteSwitchField(property, attribute);
					break;

				case "PickerFieldAttribute":
					WritePickerField(property, attribute);
					break;

				case "SliderFieldAttribute":
					WriteSliderField(property, attribute);
					break;

				case "StepperFieldAttribute":
					WriteStepperField(property, attribute);
					break;

				case "DateTimeFieldAttribute":
					WriteDateTimeField(property, attribute);
					break;

				default:
					// not recognized
					break;
			}
		}

		public void WriteEntryField(PropertyInfo property, CustomAttributeData attribute)
		{
			var fieldName = BuildFieldName(property);
			var multilineArg = attribute.NamedArguments.SingleOrDefault (na => na.MemberName == "Multiline");
			var labelArg = attribute.NamedArguments.SingleOrDefault (na => na.MemberName == "Label");
			var placeholderArg = attribute.NamedArguments.SingleOrDefault (na => na.MemberName == "Placeholder");
			var bindPath = "EntryCell.TextProperty";
			var label = GetLabelValue(property, labelArg); 

			AddFieldToOutput(fieldName, label);

			if (multilineArg.TypedValue.Value == null || (bool)multilineArg.TypedValue.Value == false)
			{
				transformer.Write(string.Format("\n\t\t\tvar {0} = new Entry {{ ", fieldName, label));

				if (placeholderArg.TypedValue.Value != null)
					transformer.Write(string.Format(", Placeholder = {0}.{1} ", resourceClass, placeholderArg.TypedValue.Value));

				transformer.WriteLine(" };");
			}
			else
			{
				bindPath = "Editor.TextProperty";

				transformer.WriteLine(string.Format("\n\t\t\tvar {0} = new Editor();", fieldName));
			}

			transformer.WriteLine(string.Format("\t\t\t{0}.SetBinding({1}, new Binding(\"{2}\", BindingMode.TwoWay, source: Model));", fieldName, bindPath, property.Name));
		}

		public void WriteTextField(PropertyInfo property, CustomAttributeData attribute)
		{
			var fieldName = BuildFieldName(property);
			var labelArg = attribute.NamedArguments.SingleOrDefault (na => na.MemberName == "Label");
			var label = GetLabelValue(property, labelArg);

			AddFieldToOutput(fieldName, label);
			transformer.WriteLine(string.Format("\n\t\t\tvar {0} = new Label {{ Text = Model.{1} }};", fieldName, property.Name));
		}

		public void WriteSwitchField(PropertyInfo property, CustomAttributeData attribute)
		{
			var fieldName = BuildFieldName(property);
			var labelArg = attribute.NamedArguments.SingleOrDefault (na => na.MemberName == "Label");
			var label = GetLabelValue(property, labelArg);

			AddFieldToOutput(fieldName, label);
			transformer.WriteLine(string.Format("\n\t\t\tvar {0} = new Switch();", fieldName, label));

			transformer.WriteLine(string.Format("\t\t\t{0}.SetBinding(Switch.IsToggledProperty, new Binding(\"{1}\", BindingMode.TwoWay, source: Model));", fieldName, property.Name));
		}

		public void WritePickerField(PropertyInfo property, CustomAttributeData attribute)
		{
			var fieldName = BuildFieldName(property);
			var labelArg = attribute.NamedArguments.SingleOrDefault (na => na.MemberName == "Label");
			var optionsArg = attribute.NamedArguments.SingleOrDefault (na => na.MemberName == "Options");
			var label = GetLabelValue(property, labelArg); 

			transformer.WriteLine(string.Format("\n\t\t\tvar {0} = new Picker();", fieldName, label));

			if (optionsArg.TypedValue.Value != null)
			{
				var options = (ReadOnlyCollection<CustomAttributeTypedArgument>)optionsArg.TypedValue.Value;
				foreach (var option in options)
				{
					transformer.WriteLine(string.Format("\t\t\t{0}.Items.Add({1}.{2});", fieldName, resourceClass, option.Value));
				}
			}

			transformer.WriteLine(string.Format("\t\t\t{0}.SelectedIndex = {0}.Items.IndexOf(Model.{1});", fieldName, property.Name));
			transformer.WriteLine(string.Format("\t\t\t{0}.SelectedIndexChanged += (object sender, EventArgs e) => {{ Model.{1} = {0}.SelectedIndex > -1 ? {0}.Items[{0}.SelectedIndex]: null; }};", fieldName, property.Name));

			AddFieldToOutput(fieldName, label);
		}

		public void WriteSliderField(PropertyInfo property, CustomAttributeData attribute)
		{
			var fieldName = BuildFieldName(property);
			var labelArg = attribute.NamedArguments.SingleOrDefault (na => na.MemberName == "Label");
			var maxArg = attribute.NamedArguments.SingleOrDefault (na => na.MemberName == "Maximum");
			var minArg = attribute.NamedArguments.SingleOrDefault (na => na.MemberName == "Minimum");
			var label = GetLabelValue(property, labelArg); 
			var max = (maxArg.TypedValue.Value == null) ? 100 : maxArg.TypedValue.Value;
			var min = (minArg.TypedValue.Value == null) ? 0 : minArg.TypedValue.Value;

			transformer.WriteLine(string.Format("\n\t\t\tvar {0} = new Slider {{ Minimum = {1}, Maximum = {2} }};", fieldName, min, max));
			transformer.WriteLine(string.Format("\t\t\t{0}.SetBinding(Slider.ValueProperty, new Binding(\"{1}\", BindingMode.TwoWay, source: Model));", fieldName, property.Name));
			transformer.WriteLine(string.Format("\t\t\tvar {0}Detail = new Label {{ Text = Model.{1}.ToString(\"G\"), FontSize = Device.GetNamedSize(NamedSize.Medium, typeof(Label)) }};", fieldName, property.Name));
			transformer.WriteLine(string.Format("\t\t\t{0}.ValueChanged += (object sender, ValueChangedEventArgs e) => {{ {0}Detail.Text = e.NewValue.ToString(\"G\"); }};", fieldName));
			transformer.WriteLine(string.Format("\t\t\tvar {0}View = new StackLayout {{ Orientation = StackOrientation.Horizontal, Spacing = 15, Children = {{ {0}, {0}Detail }} }};", fieldName));

			AddFieldToOutput(fieldName + "View", label);
		}

		public void WriteStepperField(PropertyInfo property, CustomAttributeData attribute)
		{
			var fieldName = BuildFieldName(property);
			var labelArg = attribute.NamedArguments.SingleOrDefault (na => na.MemberName == "Label");
			var maxArg = attribute.NamedArguments.SingleOrDefault (na => na.MemberName == "Maximum");
			var minArg = attribute.NamedArguments.SingleOrDefault (na => na.MemberName == "Minimum");
			var incArg = attribute.NamedArguments.SingleOrDefault (na => na.MemberName == "Increment");
			var label = GetLabelValue(property, labelArg); 
			var max = (maxArg.TypedValue.Value == null) ? 100 : maxArg.TypedValue.Value;
			var min = (minArg.TypedValue.Value == null) ? 0 : minArg.TypedValue.Value;
			var inc = (incArg.TypedValue.Value == null) ? 1 : incArg.TypedValue.Value;

			transformer.WriteLine(string.Format("\n\t\t\tvar {0} = new Stepper {{ Increment = {1}, Minimum = {2}, Maximum = {3} }};", fieldName, inc, min, max));
			transformer.WriteLine(string.Format("\t\t\t{0}.SetBinding(Stepper.ValueProperty, new Binding(\"{1}\", BindingMode.TwoWay, source: Model));", fieldName, property.Name));	
			transformer.WriteLine(string.Format("\t\t\tvar {0}Detail = new Label {{ Text = Model.{1}.ToString(\"G\"), FontSize = Device.GetNamedSize(NamedSize.Medium, typeof(Label)) }};", fieldName, property.Name));
			transformer.WriteLine(string.Format("\t\t\t{0}.ValueChanged += (object sender, ValueChangedEventArgs e) => {{ {0}Detail.Text = e.NewValue.ToString(\"G\"); }};", fieldName));
			transformer.WriteLine(string.Format("\t\t\tvar {0}View = new StackLayout {{ Orientation = StackOrientation.Horizontal, Spacing = 15, Children = {{ {0}, {0}Detail }} }};", fieldName));		

			AddFieldToOutput(fieldName + "View", label);
		}

		public void WriteDateTimeField(PropertyInfo property, CustomAttributeData attribute)
		{
			var fieldName = BuildFieldName(property);
			var labelArg = attribute.NamedArguments.SingleOrDefault (na => na.MemberName == "Label");
			var typeArg = (int)attribute.ConstructorArguments[0].Value;
			var formatArg = attribute.NamedArguments.SingleOrDefault (na => na.MemberName == "Format");
			var label = GetLabelValue(property, labelArg); 

			if (typeArg == 0)
			{
				// date 
				var format = formatArg.TypedValue.Value == null ? "D" : formatArg.TypedValue.Value;
				transformer.WriteLine(string.Format("\n\t\t\tvar {0} = new DatePicker {{ Format = \"{1}\" }};", fieldName, format));
				transformer.WriteLine(string.Format("\t\t\t{0}.SetBinding(DatePicker.DateProperty, new Binding(\"{1}\", BindingMode.TwoWay, source: Model));", fieldName, property.Name));
			}
			else
			{
				// time
				var format = formatArg.TypedValue.Value == null ? "T" : formatArg.TypedValue.Value;
				transformer.WriteLine(string.Format("\n\t\t\tvar {0} = new TimePicker {{ Format = \"{1}\" }};", fieldName, format));
				transformer.WriteLine(string.Format("\t\t\t{0}.SetBinding(TimePicker.TimeProperty, new Binding(\"{1}\", BindingMode.TwoWay, source: Model));", fieldName, property.Name));
			}		

			AddFieldToOutput(fieldName, label);
		}

		private string BuildFieldName(PropertyInfo property)
		{
			return property.Name.Substring(0, 1).ToLower() + property.Name.Substring(1) + "Field";
		}

		private string GetLabelValue(PropertyInfo property, CustomAttributeNamedArgument labelArg)
		{
			return (labelArg.TypedValue.Value == null) 
				? string.Format("{0}.{1}Label", resourceClass, property.Name)
				: string.Format("{0}.{1}", resourceClass, labelArg.TypedValue.Value);
		}

		private void AddFieldToOutput(string fieldName, string label)
		{
			output.Add(string.Format("\t\t\t\t\t\tnew StackLayout {{ Orientation = StackOrientation.Vertical, Children = {{ new Label {{ Text = {1}, FontAttributes = FontAttributes.Bold }}, {0} }} }}", fieldName, label));
		}
	}
#>